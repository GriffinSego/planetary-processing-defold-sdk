--this behavior script describes the local playable character
function init(self)
	self.joined = false
	self.position = vmath.vector3(0,0,0)
	msg.post(".", "acquire_input_focus")
	msg.post("/go", "pp_init", {}) --this initializes the SDK. If you are using authentication, you should provide the player's login to the
end								   --third parameter in the form {username=$$$, password=$$$}

function on_message(self, message_id, message, sender)
	if message_id == hash("pp_update") then
		for k, v in pairs(message.data) do print(k, "=", v) end --this compact for-loop prints all fields in a "pp_update" frame as key=value,
	end															--with each item on a newline. This is handy for debugging, but will make your 
end																--console laggy if you have too many events.

function update(self, dt)
	go.animate("/player", "position", go.PLAYBACK_ONCE_FORWARD, self.position, go.EASING_INOUTQUAD, dt)
end

function on_input(self, action_id, action)
	if action_id == hash("key_space") and action.pressed and not self.joined then --this if statement prevents the player from sending the 
		self.joined = true														  --pp_join message twice, and requires the player to press 
		msg.post("/go", "pp_join")												  --SPACE to start the game
	end
	local input = {x=0, y=0, z=0}
	local send = false
	if action_id == hash("key_w") and not action.released then
		input.y = input.y + 0.5
		self.position.y = self.position.y + 0.5
		send = true
	end
	if action_id == hash("key_a") and not action.released then
		input.x = input.x - 0.5
		self.position.x = self.position.x - 0.5
		send = true
	end
	if action_id == hash("key_s") and not action.released then
		input.y = input.y - 0.5
		self.position.y = self.position.y - 0.5
		send = true
	end
	if action_id == hash("key_d") and not action.released then
		input.x = input.x + 0.5
		self.position.x = self.position.x + 0.5
		send = true
	end
	if send and self.joined then --this is a check to prevent sending empty messages with no movement to the server, which would waste bandwidth
		print("sending")
		msg.post("/go", "pp_message", input) --multiply by dt to normalize player movement speed
		
	end
end
